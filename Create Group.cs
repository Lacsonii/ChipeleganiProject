using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;using MySql.Data.MySqlClient;namespace ChipeleganiProject{    public partial class group : Form    {        public group()        {            InitializeComponent();            PopulateDistricts();        }        private void PopulateDistricts()        {            // Creating an array of Malawian districts (you can load this data from a database).            string[] malawianDistricts = { "Balaka", "Blantyre", "Chikwawa", "Chiradzulu", "Chitipa", "Dedza", "Dowa", "Karonga",                "Kasungu", "Likoma", "Lilongwe", "Machinga", "Mangochi", "Mchinji", "Mulanje", "Mwanza",                    "Mzimba", "Neno", "Nkhata Bay", "Nkhotakota", "Nsanje", "Ntcheu", "Ntchisi", "Phalombe",                        "Rumphi", "Salima", "Thyolo", "Zomba"            };            //suggestion when user is inputting name of a district            district.AutoCompleteMode = AutoCompleteMode.Suggest;            district.AutoCompleteSource = AutoCompleteSource.ListItems;            district.Items.AddRange(malawianDistricts);// Bind the array of districts to the ComboBox.        }        databaseconnection dbsaconnection = new databaseconnection();        private bool finish()        {            dbsaconnection.openconnect();            try            {                // Insert data into the 'users' table and // Insertoing data into the 'membergroups's' table                MySqlCommand newadmin = new MySqlCommand("INSERT INTO users VALUES (@txtBoxadminusername, @txtBoxpassword, '1')", dbsaconnection.getconnection());                newadmin.Parameters.Add("@txtBoxadminusername", MySqlDbType.VarChar).Value = txtBoxadminusername.Text;                newadmin.Parameters.Add("@txtBoxpassword", MySqlDbType.VarChar).Value = txtBoxpassword.Text;                if (newadmin.ExecuteNonQuery() != 1)                {                    // Handle the case where the user insertion fails.                    return false;                }                MySqlCommand newgroup = new MySqlCommand("INSERT INTO membergroups (GroupID, Username, GroupName, District) VALUES (@txtBoxgID, @txtBoxadminusername, @txtBoxgroupname, @district)", dbsaconnection.getconnection());                newgroup.Parameters.Add("@txtBoxgID", MySqlDbType.VarChar).Value = txtBoxgID.Text;                newgroup.Parameters.Add("@txtBoxadminusername", MySqlDbType.VarChar).Value = txtBoxadminusername.Text;                newgroup.Parameters.Add("@txtBoxgroupname", MySqlDbType.VarChar).Value = txtBoxgroupname.Text;                newgroup.Parameters.Add("@district", MySqlDbType.VarChar).Value = district.Text;                if (newgroup.ExecuteNonQuery() != 1)                 {                    // Handle the case where the user insertion fails.                    return false;                }                return true;            }            catch (MySqlException ex)            {                // Handle the exception here, for example, display an error message or log the exception.                MessageBox.Show("An error occurred: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);                return false; // You may choose to return false in the case of an error.            }        }        DataTable newtable = new DataTable();        private void btnfinish_Click(object sender, EventArgs e)        {            if (String.IsNullOrEmpty(txtBoxgroupname.Text) || String.IsNullOrEmpty(district.Text) || String.IsNullOrEmpty(txtBoxadminusername.Text) || String.IsNullOrEmpty(txtBoxgID.Text) || String.IsNullOrEmpty(txtBoxpassword.Text))            {                MessageBox.Show("Please fill in all details to finish creating your member account.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);                return;            }            if (!IsPasswordComplex(txtBoxpassword.Text))            {                MessageBox.Show("Password must contain betweet 8 & 16 characters with uppercase, lowercase, digit, and special symbol.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);                txtBoxpassword.Text = "";                return;            }            if (txtBoxgID.Text.Length < 5 || txtBoxgID.Text.Length > 8)//check username measures            {                MessageBox.Show("Group ID must be between 5 and 8 characters long.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);                return;            }            try            {                if (finish() == true)                {                    //confirmation dialog of creating chipeleganyu account                    DialogResult result = MessageBox.Show("Are you sure you want to create Chipeleganyu group?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);                    if (result == DialogResult.Yes)                    {                        MessageBox.Show("Group Name and Adimn account successfully created.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);                        this.Hide();                        SignUp signup = new SignUp();                        signup.ShowDialog();                    }                    else                    {                        DialogResult resul = MessageBox.Show("Are you sure you want to cancel?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);                        if (resul == DialogResult.Yes)                        {                            //emptying the textbox values if creation of account failed                            txtBoxadminusername.Text = "";                            txtBoxgroupname.Text = "";                            txtBoxgID.Text = "";                            txtBoxpassword.Text = "";                            district.Text = "";                            MessageBox.Show("Group creation failed", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);                            return;                        }                    }                }            }            catch (MySqlException failedEntry)            {                //if failed creation the user should be removed in the users table                MessageBox.Show(failedEntry.Message);                return;            }        }        private bool IsPasswordComplex(string password)        {            // Define your password complexity requirements here            bool hasUppercase = false;            bool hasLowercase = false;            bool hasDigit = false;            bool hasSpecialSymbol = false;            if (password.Length >= 8 && password.Length <= 16)                foreach (char c in password)                {                    if (char.IsUpper(c))                        hasUppercase = true;                    else if (char.IsLower(c))                        hasLowercase = true;                    else if (char.IsDigit(c))                        hasDigit = true;                    else if (!char.IsLetterOrDigit(c))                        hasSpecialSymbol = true;                }            return hasUppercase && hasLowercase && hasDigit && hasSpecialSymbol;        }        private void checkBoxshow_CheckedChanged(object sender, EventArgs e)        {            if (checkBoxshow.Checked == true)            {                txtBoxpassword.UseSystemPasswordChar = false;            }            else            {                txtBoxpassword.UseSystemPasswordChar = true;            }        }    }}